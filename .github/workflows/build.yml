name: Build

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      aws-assume-role-arn:
        type: string
        required: true
      aws-region:
        type: string
        required: true
      aws-statefile-s3-bucket:
        type: string
        required: true
      aws-lock-dynamodb-table:
        type: string
        required: true
      ecr-repository:
        type: string
        required: true

jobs:
  build-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-assume-role-arn }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.aws-region }}

      - name: Terraform Init
        working-directory: ./infra/ecr
        run: |
          terraform init \
            -backend-config="bucket=${{ inputs.aws-statefile-s3-bucket }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ inputs.aws-region }}" \
            -backend-config="dynamodb_table=${{ inputs.aws-lock-dynamodb-table }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: terraform-plan
        working-directory: ./infra/ecr
        run: |
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform plan -var-file="../inventories/${{ inputs.environment }}/terraform.tfvars" -out="${{ inputs.environment }}.plan"

      - name: Terraform Apply
        if: env.destroy != 'true'
        id: terraform-apply
        working-directory: ./infra/ecr
        run: |
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform apply "${{ inputs.environment }}.plan"

      - name: Fetch SSM Parameters
        id: fetch-ssm-parameters
        run: |
          PARAMS=$(aws ssm get-parameters-by-path --path "/${{ inputs.environment }}" --region ${{ inputs.aws-region }} --with-decryption --query "Parameters[*].{Name:Name,Value:Value}" --output json)
          echo "params=$PARAMS" >> $GITHUB_ENV

      - name: Prepare .env from template
        working-directory: ./app
        run: |
          # Copy .env.template to .env
          cp .env.prod .env

          # Replace placeholders with SSM parameters
          PARAMS=$(echo ${{ env.params }} | jq -c '.[]')
          for row in $PARAMS; do
            name=$(echo $row | jq -r '.Name' | cut -d'/' -f3)
            value=$(echo $row | jq -r '.Value')
            # Use sed to replace placeholders in .env file
            sed -i "s|\${$name}|$value|g" .env
          done

      - name: Install Composer Dependencies
        run: cd app && composer install --prefer-dist --no-interaction --no-progress --no-dev

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "commit-hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get timestamp
        id: get-timestamp
        run: echo "timestamp=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: ${{ env.commit-hash }}-${{ env.timestamp }}
        working-directory: ./app
        run: |
          # Build and push the uniquely tagged image using docker-compose
          docker-compose -f docker-compose.prod.yml build
          docker tag app_web $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Tag the image as latest and push
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest